@page "/contacts"

@layout MainLayout

@inject IContactService contactService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@*@attribute [Authorize]*@

<MudText Typo="Typo.h4" Class="ma-8">Contacts</MudText>

<MudTable Items="@ContactListItems" Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ContactListItem,bool>(FilterFuncSimple)">
	<ColGroup>
		<col style="width:50px;" />
		<col />
		<col />
		<col />
		<col />
		<col />
		<col style="width:100px;" />
	</ColGroup>
	<ToolBarContent>
		<MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddContact())">Add</MudButton>
		<MudSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Id</MudTh>
		<MudTh>ContactOwner</MudTh>
		<MudTh>Email</MudTh>
		<MudTh>Address</MudTh>
		<MudTh>WebSite</MudTh>
		<MudTh>Phone</MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Id">@context.Id</MudTd>
		<MudTd DataLabel="ContactOwner">@context.ContactOwner</MudTd>
		<MudTd DataLabel="Email">@context.Email</MudTd>
		<MudTd DataLabel="Address">@context.Address</MudTd>
		<MudTd DataLabel="WebSite">@context.WebSite</MudTd>
		<MudTd DataLabel="Phone">@context.Phone</MudTd>
		<MudTd>
			<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => EditContact(context.Id))" />
			<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => DeleteContact(context.Id))" />
		</MudTd>
	</RowTemplate>
</MudTable>


@code {
	private bool dense = false;
	private bool hover = true;
	private bool striped = true;
	private bool bordered = false;

	private string searchString = "";

	private IEnumerable<ContactListItem> ContactListItems = new List<ContactListItem>();

	private async Task ReloadData()
	{
		ContactListItems = await contactService.GetContacts();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await ReloadData();
		}

		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
		}
	}

	private bool FilterFuncSimple(ContactListItem ContactListItem) => FilterFunc(ContactListItem, searchString);

	private bool FilterFunc(ContactListItem ContactListItem, string searchString)
	{
		return
			string.IsNullOrWhiteSpace(searchString)
			||
			ContactListItem.ContactOwner.Contains(searchString, StringComparison.OrdinalIgnoreCase)
			||
			ContactListItem.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)
			||
			ContactListItem.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase)
			||
			ContactListItem.WebSite.Contains(searchString, StringComparison.OrdinalIgnoreCase)
			||
			ContactListItem.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)
		;
	}

	private async Task AddContact()
	{
		var parameters = new DialogParameters { };
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

		var dialog = DialogService.Show<ContactDialog>("Add contact", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await contactService.AddContact(((ContactDialog)dialog.Dialog).model);
			await ReloadData();
		}
	}

	private async Task EditContact(int contactId)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContactId", contactId);

		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
		var dialog = DialogService.Show<ContactDialog>("Edit contact", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await contactService.EditContact(contactId, ((ContactDialog)dialog.Dialog).model);
			await ReloadData();
		}
	}

	private async Task DeleteContact(int contactId)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", "Do you really want to delete this contact? This process cannot be undone.");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var dialog = DialogService.Show<ConfirmationDialog>("Delete contact", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await contactService.DeleteContact(contactId);
			await ReloadData();
		}
	}
}